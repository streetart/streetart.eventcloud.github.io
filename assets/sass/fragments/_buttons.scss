@import "../settings/settings";

@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    min-width: 100% !important;
    margin-left: 0;
    margin-right: 0;
  }
  @else {
    display: inline-block;
    width: auto;
    margin: $button-margin;
  }
}

@mixin button-animation {
  /*
  https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
  box-shadow: [inset?] [top] [left] [blur] [size] [color];

  Tips:
    - We're setting all the blurs to 0 since we want a solid fill.
    - Add the inset keyword so the box-shadow is on the inside of the element
    - Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
    - Multiple shadows can be stacked
    - If you're animating multiple shadows, be sure to keep the same number of shadows so the animation is smooth. Otherwise, you'll get something choppy.
*/

  // Animate the size, inside
  .fill:hover,
  .fill:focus {
    box-shadow: inset 0 0 0 2em var(--hover);
  }

  // Animate the size, outside
  .pulse:hover,
  .pulse:focus {
    animation: pulse 1s;
    box-shadow: 0 0 0 2em rgba(#fff,0);
  }

  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 var(--hover); }
  }

  // Stack multiple shadows, one from the left, the other from the right
  .close:hover,
  .close:focus {
    box-shadow:
      inset -3.5em 0 0 0 var(--hover),
      inset 3.5em 0 0 0 var(--hover);
  }

  // Size can also be negative; see how it's smaller than the element
  .raise:hover,
  .raise:focus {
    box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
    transform: translateY(-0.25em);
  }

  // Animating from the bottom
  .up:hover,
  .up:focus {
    box-shadow: inset 0 -3.25em 0 0 var(--hover);
  }

  // And from the left
  .slide:hover,
  .slide:focus {
    box-shadow: inset 6.5em 0 0 0 var(--hover);
  }

  // Multiple shadows, one on the outside, another on the inside
  .offset {
    box-shadow:
      0.3em 0.3em 0 0 var(--color),
      inset 0.3em 0.3em 0 0 var(--color);

    &:hover,
    &:focus {
      box-shadow:
        0 0 0 0 var(--hover),
        inset 6em 3.5em 0 0 var(--hover);
    }
  }

  //=== Set button colors
  // If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
  $colors: (
    fill: $primary,
    pulse: $primary,
    close: $primary,
    raise: #ffa260,
    up: #e4cb58,
    slide: #8fc866,
    offset: #19bc8b
  );

  // Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
  @each $button, $color in $colors {
    .#{$button} {
      --color: #{$color};
      --hover: #{desaturate($color, 10%)};
    }
  }

  // Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
  .button {
    color: var(--color);
    transition: 0.25s;
    border-radius: 50px;

    &:hover,
    &:focus {
      border-color: var(--hover);
      color: #fff;
    }
  }
  // Basic button styles
  .button {
    background: none;
    border: 2px solid;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
  }

}



@mixin btn-default {
  button {
    border: none;
    background-color: transparent;

  }
  .btn {
    font-family: $header-font-family !important;
    background-image: -webkit-linear-gradient(left, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%), -webkit-linear-gradient(left, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%);
    background-image: -moz-linear-gradient(left, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%), -moz-linear-gradient(left, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%);
    background-image: -o-linear-gradient(left, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%), -o-linear-gradient(left, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%);
    background-image: linear-gradient(to right, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%), linear-gradient(to right, rgba(61,194,241,0.5) 0%, rgba(71, 58, 164, 0.5) 100%);
    border-radius: 40px;
    box-sizing: border-box;
    color: $white;
    height: 60px;
    line-height: 60px;
    letter-spacing: 1px;
    margin: 0 auto;
    padding: 6px;
    position: relative;
    text-decoration: none;
    min-width: 200px;
    z-index: 2;
    -webkit-box-shadow: 0px 0px 15px 1px rgba(92, 80, 171, 0.5);
    -moz-box-shadow: 0px 0px 15px 1px rgba(92, 80, 171, 0.5);
    box-shadow: 0px 0px 15px 1px rgba(92, 80, 171, 0.5);
    &:hover {
      border-radius: 40px;
    }
    &.expanded {
      @include button-expand;
    }
    @media (max-width: 767px) {
      &.expanded-xs {
        @include button-expand;
      }
    }
  }

  .btn:hover {
    color: #fff;
  }

  .btn span{
    align-items: center;
    background: #3DC2F1;
    background: -moz-linear-gradient(left, #3dc2f1 0%, #6b58ea 100%);
    background: -webkit-linear-gradient(left, #3dc2f1 0%, #6b58ea 100%);
    background: linear-gradient(to right, #3dc2f1 0%, #6b58ea 100%);
    border-radius: 40px;
    display: flex;
    justify-content: center;
    height: 100%;
    transition: background .5s ease;
    width: 100%;
    font-size: 16px;
    letter-spacing: $letter-spacing;
    text-transform: capitalize;
  }

  .btn:hover span {
    border-radius: 40px;
    background: #3DC2F1;
    background: -moz-linear-gradient(right, #3dc2f1 0%, #6b58ea 100%);
    background: -webkit-linear-gradient(right, #3dc2f1 0%, #6b58ea 100%);
    background: linear-gradient(to left, #3dc2f1 0%, #6b58ea 100%);
  }


}
